# From: https://about.gitlab.com/2017/09/21/how-to-create-ci-cd-pipeline-with-autodeploy-to-kubernetes-using-gitlab-and-helm/

cache:
  untracked: true
  key: "$CI_COMMIT_REF_NAME"
  paths:
    - vendor/

variables:
  MIN_CODE_COVERAGE: "20.0"
  NATIVE_BRANCH_OVERRIDE: "hotfix/destroystream"

before_script:
  - go version || echo "Go executable not found."
  - echo $CI_BUILD_REF
  - echo $CI_PROJECT_DIR
  - echo $PWD
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -t rsa $GITLAB_SERVER > ~/.ssh/known_hosts
  - git config --global url."git@$GITLAB_SERVER:".insteadOf "https://gitlab.com/"
  - git config --global url."git@$GITLAB_SERVER:".insteadOf "https://git.xx.network/" --add
  - export PATH=$HOME/go/bin:$PATH


stages:
  - build
  - tag
  - trigger_integration


build:
  stage: build
  image: $DOCKER_IMAGE
  tags:
    - gpu
  except:
    - tags
  script:
    # Set up dependencies
    - go clean --modcache --cache
    - go mod tidy
    - go build ./...
    # Setup, diagnostics
    - sudo mkdir -p /opt/xxnetwork/lib/
    - sudo mkdir -p /opt/xxnetwork/include/
    - sudo chown -R -v npuser /opt/xxnetwork
    #- cat /usr/local/cuda/version.txt
    - nvidia-smi

    # Check out appropriate native library version for testing
    - git clone -b release git@$GITLAB_SERVER:elixxir/gpumathsnative.git
    - cd gpumathsnative
    - if [ "$NATIVE_BRANCH_OVERRIDE" != "" ]
    - then
    - echo $NATIVE_BRANCH_OVERRIDE
    - git checkout $NATIVE_BRANCH_OVERRIDE
    - elif [ "$CI_COMMIT_REF_NAME" != "" ]
    - then
    - echo $CI_COMMIT_REF_NAME
    - git checkout $CI_COMMIT_REF_NAME
    - fi

    # Build native library
    - cd cgbnBindings/powm
    - make turing
    - make install
    - cd ../../..

    # Run tests
    - sudo mkdir -p testdata
    - sudo chown -R -v npuser testdata
    # Test coverage
    - go test -v -tags gpu -coverprofile=testdata/coverage.out -covermode atomic -coverpkg ./... -race ./...
    # Is it possible to correctly merge the coverage data between these two build tags?
    # (Or simply ignore coverage for non-CUDA dummy code paths)
    - go test -v -coverprofile=testdata/coverage-noncuda.out -covermode atomic -coverpkg ./... -race ./...
    # Get coverage data
    - go tool cover -func=testdata/coverage.out
    - go tool cover -html=testdata/coverage.out -o testdata/coverage.html
    - go tool cover -func=testdata/coverage-noncuda.out
    - go tool cover -html=testdata/coverage-noncuda.out -o testdata/coverage-noncuda.html

    # Test Coverage Check
    - go tool cover -func=testdata/coverage.out | grep "total:" | awk '{print $3}' | sed 's/\%//g' > testdata/coverage-percentage.txt
    - export CODE_CHECK=$(echo "$(cat testdata/coverage-percentage.txt) >= $MIN_CODE_COVERAGE" | bc -l)
    - (if [ "$CODE_CHECK" == "1" ]; then echo "Minimum coverage of $MIN_CODE_COVERAGE succeeded"; else echo "Minimum coverage of $MIN_CODE_COVERAGE failed"; exit 1; fi);

    - sudo mkdir -p release
    - sudo chown -R -v npuser release
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' ./...
    - cp -ra /opt/xxnetwork/* release/
  artifacts:
    paths:
      - vendor/
      - lib/
      - testdata/
      - release/

# TODO(?): have server pull in the latest from release/master automatically for this pipeline, if possible
trigger_integration:
  stage: trigger_integration
  trigger:
    project: elixxir/integration
    branch: $CI_COMMIT_REF_NAME
  only:
    - release
    - master
